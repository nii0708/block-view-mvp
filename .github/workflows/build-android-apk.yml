 # Workflow name
name: Build Android APK

# Controls when the workflow will run
on:
  push:
    branches:
      # - main         # Trigger on pushes to the main branch
      - develop      # Trigger on pushes to the develop branch
      - 'develop/**' # Trigger on pushes to branches like develop/feature/xyz
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job builds the Android app
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4 # Action to check out your code

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18 # Specify Node.js version (check compatibility with your Expo SDK)

      # Step 3: Cache Node.js modules to speed up installation
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          # Path to cache (node_modules folder)
          path: node_modules
          # Create a unique key based on OS and lock file hash
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Adjust if using yarn.lock
          # Fallback keys if the exact key isn't found
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install project dependencies
      - name: Install dependencies
        # Run install only if the cache didn't fully restore dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install # Or use 'yarn install' if your project uses Yarn

      # Step 5: Install the Expo Application Services (EAS) CLI globally
      - name: Install EAS CLI globally
        run: npm install -g eas-cli

      #  Step 6: Determine EAS Profile based on branch
      - name: Determine EAS Profile
        id: get_profile # Give this step an ID so we can reference its output
        run: |
          # Check if the branch is 'main'
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Using production profile for main branch"
            echo "profile=production" >> $GITHUB_OUTPUT
          # Check if the branch is 'develop' or starts with 'develop/'
          elif [[ "${{ github.ref }}" == "refs/heads/develop" || "${{ github.ref }}" == refs/heads/develop/* ]]; then
            echo "Using development profile for develop branch"
            echo "profile=development" >> $GITHUB_OUTPUT
          else
            # Default case or handle other branches if needed
            echo "Branch is neither main nor develop. Using development profile as default."
            echo "profile=development" >> $GITHUB_OUTPUT
          fi

      # Step 7: Build with EAS CLI using the determined profile
      - name: Build with EAS CLI
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        # Use the output from the 'get_profile' step to set the profile dynamically
        run: eas build --platform android --profile ${{ steps.get_profile.outputs.profile }} --non-interactive

      # --- Future Steps ---
      # To automatically use the APK within the workflow (e.g., for distribution):
      # 1. Add a step/action to wait for the EAS build to complete successfully.
      # 2. Add a step to parse the download URL from the 'eas build' logs.
      # 3. Add a step to download the APK from that URL using curl/wget.
      # 4. Add steps to upload the downloaded APK (e.g., to Firebase App Dist, GitHub Artifacts).